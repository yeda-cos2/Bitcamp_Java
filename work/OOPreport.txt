1. OOP(Object Oriented Programming)
현실 세계를 컴퓨터 상에서 표현하는 방식/방법론 중 하나로 최근 가장 많이 채택하는 방식이다. 

2. 객체
현실 세계에서 표현될 수 있는 모든 개념적, 물리적인 대상이다. 즉, 객체란 어떠한 속성값과 행동을 가지고 있는 데이터이다. 자바에서는 이 속성과 행동을 각각 필드와 메소드라고 부른다.
우리는 일상생활에서 쉽게 객체를 찾아볼 수 있다. 자동차 또한 속성값(제조사 정보, 차량 정보, 크기 등)과 행동(앞으로 이동, 정지 등)을 가진 하나의 객체이다. 이러한 현실세계의 객체를 소프트웨어 객체로 설계하는 것을 객체 모델링이라고 한다.

3. Class
객체의 행위, 속성, 상태를 표현하는 것이다. 클래스란 객체를 찍어내기 위한 설계도이다. 같은 설계도에서 나온 제품은 유사한 속성을 지닌다. 따라서 클래스란 유사한 특징을 지닌 객체들의 속성을 묶어놓은 집합체라고 할 수 있다.
자동차를 하나의 객체라고 한다면, 자동차 공장을 클래스라고 할 수 있다. 클래스가 객체를 만들어내는 것이다.
그러나 같은 툴, 설계도로 찍어낸 제품이 모두 같은 제품은 아니다. 하나하나의 객체는 구분이 되는 것이며, 이들의 속성이 비슷한 것이라고 할 수 있다.

4. abstraction(추상화)
추상화란 불필요한 것을 제거하고 중요한 부분을 살리는 것이다. 즉 구체적인 사물들 간의 공통점을 취하고 차이점을 버리는 일반화를 사용하거나, 중요한 부분을 강조하기 위해 불필요한 세부사항을 제거함으로써 단순하게 만드는 것이다. 추상화는 우리가 만드는 프로그램이 무엇인가에 의존한다. 
같은 객체들을 추상화한다고 해도 어떤 목적을 가지는가에 따라 필요한 부분이 달라진다. 예를 들어 판매 시스템과 의료 시스템을 비교해보자. 판매 시스템의 경우 사람들(객체)을 구매자로, 의료 시스템의 경우 사람들을 환자로 인식한다.

5. Generalization(일반화) / Inheritance(상속)
추상화 정도가 높은 것을 일반적이다라고 한다. 객체들의 일반적, 공통적 속성을 뽑아 추상화시키기 때문이다. 객체들의 일반적인 속성을 갖는 부모 클래스가 존재할 수 있다. 이때 다른 클래스들은 이러한 부모 클래스의 속성을 물려받을 수 있다. 
예를 들어 K사 자동차 클래스가 있다고 하자. K사 자동차 클래스는 부모 클래스로, K사의 각 기종의 클래스들은 K자동차 클래스의 속성값을 상속받고 있다. 이때 K사 자동차에 새로운 기능이 추가된다면 K사 자동차의 속성값만 변경해줘도 모든 기종의 자동차가 해당 기능에 대한 속성값을 물려받게 된다. 

6. Specialization(구체적)
클래스는 유사한 특징을 지닌 객체들을 묶어놓은 집합체이다. 반대로 클래스를 하나하나의 객체로 분류하는 것을 구체화라고 한다. 클래스를 일반적이고, 공통적인 특징을 살려 추상화시키는 것의 반대되는 의미이다.

7. Realization
여러 객체의 공통점을 살려 하나의 큰 개념으로 추상화한 객체를 우리 눈으로 볼 수 있도록 만든 것을 실체화라고 한다. 객체를 소프트웨어에 실체화하면 이를 인스턴스라고 칭한다.

8. Association
한 객체가 다른 객체와 연결되어 있음을 나타낼 때 그들을 association 관계로 지칭한다. 객체들 간의 공통점을 통해 클래스를 만들 수 있다. 이때 객체들은 구체적이거나, 일반적이고 공통적인 관계를 가질 수 있다.

9. dependency
클래스의 한 곳이 변경되면 그것을 사용하는 다른 곳도 같이 변경해줘야 하는 관계를 표현할 때 주로 사용한다. association 관계와 달리 클래스 인스턴스의 레퍼런스를 유지하고 있지 않는다. 

10. Polymorphism
인터페이스만 알면 어떠한 환경에서든 동일한 인터페이스를 사용할 수 있는 것을 말한다. 우리는 마우스를 사용할 때 제조사, 제조국 등에 상관없이 마우스 사용법만 알면 어떠한 마우스든지 사용할 수 있다. 자바에서는 대표적으로 오버로딩, 오버라이딩 기술이 이에 해당한다.

11. Encapsulation / 절차은닉 / 정보은닉
Encapsulation이란 객체의 속성과 행위를 하나로 묶는 작업을 말한다. encapsulation을 통해 구현에 사용된 데이터의 상세 내용을 외부에 감출 수 있다. 이렇게 캡슐화된 정보는 getter 메소드를 사용하여 정보를 불러올 수 있다.

12. OverLoading
객체지향에는 다형성이라는 개념이 있다. 하나의 인터페이스를 다양하게 활용할 수 있는 기능이다. 우리는 add라는 메소드를 두 인자를 더하는 행위라고 정의할 수 있다. 이때 동일하게 add메소드를 사용하고 인자값을 int형으로 줄 경우 값이 int형으로 반환되며, double형으로 줄 경우 값이 double형으로 반환되는 것을 오버로딩이라고 한다.

13. OverRiding
상위 클래스를 공유받는 하위클래스가 있다고 하자. 이때 부모 클래스의 속성 중 바꾸고싶은 1가지 속성이 있다. 하지만 부모클래스의 속성을 상속받을 경우 특정 속성만 제외하고 상속을 받는 것은 불가능하다. 따라서 모든 속성을 물려받되, 바꾸고 싶은 속성은 자신에 맞게 재정의 할 수 있는데 이것을 오버라이딩이라고 한다. 